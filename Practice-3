// Import dependencies
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for JWT
const SECRET_KEY = "superSecretKey123";

// Dummy users with roles
const USERS = [
  { username: "admin", password: "admin123", role: "Admin" },
  { username: "mod", password: "mod123", role: "Moderator" },
  { username: "user", password: "user123", role: "User" },
];

// -------------------- LOGIN ROUTE --------------------
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  const foundUser = USERS.find(
    (u) => u.username === username && u.password === password
  );

  if (!foundUser) {
    return res.status(401).json({ message: "Invalid username or password" });
  }

  // Create a token containing the role
  const token = jwt.sign(
    { username: foundUser.username, role: foundUser.role },
    SECRET_KEY,
    { expiresIn: "1h" }
  );

  res.json({
    message: "Login successful",
    token,
    role: foundUser.role,
  });
});

// -------------------- JWT VERIFICATION MIDDLEWARE --------------------
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader)
    return res.status(403).json({ message: "Token not provided" });

  const token = authHeader.split(" ")[1];

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ message: "Invalid or expired token" });
    req.user = decoded; // contains username and role
    next();
  });
}

// -------------------- ROLE CHECK MIDDLEWARE --------------------
function allowRoles(...roles) {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res
        .status(403)
        .json({ message: `Access denied: ${req.user.role} cannot access this route` });
    }
    next();
  };
}

// -------------------- PROTECTED ROUTES --------------------

// Accessible by Admin only
app.get("/admin/dashboard", verifyToken, allowRoles("Admin"), (req, res) => {
  res.json({
    message: "Welcome Admin! You have full access to the dashboard.",
    user: req.user,
  });
});

// Accessible by Moderator only
app.get("/moderator/manage", verifyToken, allowRoles("Moderator"), (req, res) => {
  res.json({
    message: "Welcome Moderator! You can manage user content here.",
    user: req.user,
  });
});

// Accessible by User only
app.get("/user/profile", verifyToken, allowRoles("User"), (req, res) => {
  res.json({
    message: "Welcome User! This is your profile page.",
    user: req.user,
  });
});

// -------------------- START SERVER --------------------
const PORT = 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
